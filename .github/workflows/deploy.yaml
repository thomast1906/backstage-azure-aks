on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

name: Publish

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      # Beginning of yarn setup, keep in sync between all workflows, see ci.yml
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/ # Needed for auth

      # - name: yarn install
      #   uses: backstage/actions/yarn-install@v0.5.5
      #   with:
      #     cache-prefix: ${{ runner.os }}-v${{ matrix.node-version }}
      # # End of yarn setup

      - name: yarn install
        run: yarn install --frozen-lockfile

      - name: type checking and declarations
        run: yarn tsc --incremental false

      - name: build
        run: yarn build:backend

      - name: Generate build ID
        id: prep
        run: |
          sha=${GITHUB_SHA::8}
          ts=$(date +%s)
          echo "::set-output name=BUILD_ID::${sha}-${ts}"

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        env:
          DOCKER_BUILDKIT: 1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker image build . -f packages/backend/Dockerfile -t backstage:${{ steps.prep.outputs.BUILD_ID }}
          # docker tag backstage:latest ${{ secrets.REGISTRY_LOGIN_SERVER }}/backstage:${{ steps.prep.outputs.BUILD_ID }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/backstage:${{ steps.prep.outputs.BUILD_ID }}

      # - name: Build the image and push it to ACR
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     tags: tamopsacr.azurecr.io/backstage:${{ github.sha }}
      #     file: packages/backend/Dockerfile
